{"version":3,"sources":["Components/Nav.js","Components/Home.js","Components/Currency.js","Components/CurrencyDetail.js","Components/Predictionsettings.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","navStyle","color","className","src","alt","style","to","Home","display","justifyContent","alignItems","float","width","href","THEME","HeaderRow","Row","Currency","useState","curritem","setCurritem","league","setLeague","search","setSearch","theme","useTheme","useEffect","a","axios","get","result","data","fetchData","nodes","filter","item","Name","toLowerCase","includes","DropdownButton","id","title","Dropdown","Item","onClick","e","target","textContent","htmlFor","type","onChange","event","value","layout","custom","tableList","map","cur","Image","pathname","state","CurName","Id","League","Price","CurrencyDetail","match","location","useLocation","setItem","predicteditem","setPredictedItem","pastleague","setPastLeague","showPrediction","setShowPrediction","itemlink","setItemLink","realleague","setRealLeague","fetchOldData","oldLeague","params","link","replace","x","CustomTooltip","active","payload","label","length","Button","variant","fetchPredictedPrice","LineChart","height","margin","top","right","bottom","left","Line","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","dy","YAxis","position","angle","Tooltip","content","Predictionsettings","settings","setSettings","units","setUnits","activation","setActivation","fitsettings","setFitSettings","epochs","setEpochs","batchsize","setBatchSize","error","setError","apiresponse","setApiResponse","showError","setShowError","showModel","setShowModel","getresponse","setGetResponse","postresponse","setPostResponse","showResponse","setShowResponse","showButton","setShowButton","listItems","layer","amount","function","deleteItem","index","tmp","i","splice","SettingsError","Alert","SettingsModel","timeId","setTimeout","clearTimeout","setBackendModel","version","post","model","console","log","Orig","ResponseTable","Table","MLButton","resultFromGet","layersettings","resultFromPost","newModel","createNewModel","Container","striped","bordered","hover","Form","Control","name","placeholder","isNaN","Number","isInteger","push","clicked","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23f9ee43.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n  // Navigation link style\r\n  const navStyle = {\r\n    color: \"white\",\r\n  };\r\n\r\n  /*  \r\n    The navigation bar on the top of the web page is defined here.\r\n    Links to home page, currency page and neural network settings page.\r\n  */\r\n  return (\r\n    <nav>\r\n      <img className=\"logo\" src={\"/final_logo_small.png\"} alt=\"Logo\"></img>\r\n      <ul className=\"nav-links\">\r\n        <Link style={navStyle} to=\"/\">\r\n          <li>Home</li>\r\n        </Link>\r\n        <Link style={navStyle} to=\"/Currency\">\r\n          <li>Currency</li>\r\n        </Link>\r\n        <Link style={navStyle} to=\"/Predictionsettings\">\r\n          <li>ML model settings</li>\r\n        </Link>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\n\r\n/*\r\n  Home page, lists information about the game and the resources used for this application.\r\n*/\r\nfunction Home() {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <h1>Home Page for the application</h1>\r\n      </div>\r\n      <br />\r\n      <br />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          width: \"50%\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"justify\",\r\n        }}\r\n      >\r\n        <h3>\r\n          This application allows the User to view currency data for the ARPG{\" \"}\r\n          <a href={\"https://www.pathofexile.com/\"}>Path of Exile</a>. Players in\r\n          Path of Exile (or poe for short) can trade with each other, however\r\n          there does not exist a money equivalent in the game, such as gold or\r\n          coins. This is why certain items with varying uses are used by players\r\n          as a pseudo money equivalent to facilitate easier trading between\r\n          players.\r\n        </h3>\r\n      </div>\r\n      <div\r\n        style={{\r\n          float: \"right\",\r\n          width: \"50%\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"justify\",\r\n        }}\r\n      >\r\n        <h3>Links to used resources</h3>\r\n      </div>\r\n\r\n      <h3>\r\n        <a href={\"https://poe.ninja/\"}>Poe.ninja</a>, used to get data for\r\n        currently active leagues\r\n      </h3>\r\n      <h3>\r\n        <a href={\"https://poe.watch/\"}>Poe.watch</a>, used to get date data for\r\n        historical data\r\n      </h3>\r\n      <h3>\r\n        <a href={\"https://poe-antiquary.xyz/\"}>Poe-antiquary</a>, used to get\r\n        data for expired leagues\r\n      </h3>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Table,\r\n  Header,\r\n  HeaderRow,\r\n  HeaderCell,\r\n  Body,\r\n  Row,\r\n  Cell,\r\n} from \"@table-library/react-table-library/table\";\r\nimport { useTheme } from \"@table-library/react-table-library/theme\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/*\r\n  This page is for displaying price data for all of the currency items in the selected league\r\n*/\r\n\r\n// Theme for the table\r\nconst THEME = {\r\n  HeaderRow: `  \r\n    font-weight: bold;\r\n    font-size: 24px;\r\n \r\n    background-color: #eaf5fd;\r\n  `,\r\n  Row: `\r\n    font-size: 16px;\r\n    \r\n    &:hover {\r\n      color: #212529;\r\n      cursor: default;\r\n    }\r\n  `,\r\n};\r\n\r\nfunction Currency() {\r\n  let [curritem, setCurritem] = useState([]);\r\n  let [league, setLeague] = useState(\"Scourge\"); // Default league that data is displayed for.\r\n  const [search, setSearch] = useState(\"\"); // Search field is empty by default\r\n  const theme = useTheme(THEME); //load theme\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      /*\r\n         API call to backend. This returns an array of all the currency items in the selected league that poe.ninja tracks\r\n      */\r\n      const result = await axios.get(`/api/getCurrency?League=${league}`);\r\n      setCurritem([...result.data]); // Result data is set as the item, this forces UI update\r\n    }\r\n    fetchData();\r\n  }, [league]); // This useEffect is made every time league is changed\r\n\r\n  // Filter curritem to display only the items that have the same letter combination as what is input in the search field, not case sensitive.\r\n  const data = {\r\n    nodes: curritem.filter((item) =>\r\n      item.Name.toLowerCase().includes(search.toLowerCase())\r\n    ),\r\n  };\r\n  return (\r\n    <>\r\n      <div>Select ongoing League</div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <DropdownButton id=\"dropdown-basic-button\" title={league}>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              setLeague(e.target.textContent);\r\n            }}\r\n          >\r\n            Scourge\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              setLeague(e.target.textContent);\r\n            }}\r\n          >\r\n            Hardcore Scourge\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              setLeague(e.target.textContent);\r\n            }}\r\n          >\r\n            Standard\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              setLeague(e.target.textContent);\r\n            }}\r\n          >\r\n            Hardcore\r\n          </Dropdown.Item>\r\n        </DropdownButton>\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <label htmlFor=\"search\">\r\n          Search by Name: <br></br>\r\n          <input\r\n            id=\"search\"\r\n            type=\"text\"\r\n            onChange={(event) => {\r\n              setSearch(event.target.value);\r\n            }}\r\n          />\r\n        </label>\r\n      </div>\r\n      <>\r\n        <Table data={data} theme={theme} layout={{ custom: true }}>\r\n          {(tableList) => (\r\n            <>\r\n              <Header>\r\n                <HeaderRow>\r\n                  <HeaderCell style={{ width: \"100px\" }}>Item</HeaderCell>\r\n                  <HeaderCell style={{ width: \"100px\" }}>Price</HeaderCell>\r\n                </HeaderRow>\r\n              </Header>\r\n              <Body>\r\n                {tableList.map((cur, id) => (\r\n                  <Row key={id} item={cur} style={{ width: \"200px\" }}>\r\n                    <Cell style={{ width: \"100px\" }}>\r\n                      {\r\n                        <img\r\n                          src={cur.Image}\r\n                          alt={\"Picture of \" + cur.Name}\r\n                        ></img>\r\n                      }{\" \"}\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/Currency/${cur.Name}`,\r\n                          state: {\r\n                            CurName: cur.Name,\r\n                            Id: cur.Id,\r\n                            League: league,\r\n                          },\r\n                        }}\r\n                      >\r\n                        {cur.Name}\r\n                      </Link>\r\n                    </Cell>\r\n                    <Cell style={{ width: \"100px\" }}>{cur.Price}</Cell>\r\n                  </Row>\r\n                ))}\r\n              </Body>\r\n            </>\r\n          )}\r\n        </Table>\r\n      </>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Currency;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n} from \"recharts\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Button from \"react-bootstrap/button\";\r\n\r\n/*\r\n  This page is for displaying detailed price data for the selected currency item\r\n*/\r\nfunction CurrencyDetail({ match }) {\r\n  const location = useLocation(); // location is used so that additional parameters can be passed down to this component from 'Currency'\r\n  let [item, setItem] = useState([]);\r\n  let [predicteditem, setPredictedItem] = useState([]);\r\n  let [league, setLeague] = useState([location.state.League]); // The league the data is shown for depends on the selected league on the 'Currency' page\r\n  let [pastleague, setPastLeague] = useState(\"Expedition\"); // Default past league on the dropdown menu is set to 'Expedition'\r\n  const [showPrediction, setShowPrediction] = useState(false);\r\n  let [itemlink, setItemLink] = useState(\"\"); // Link to wiki page\r\n  let [realleague, setRealLeague] = useState(\"\"); // Set displayed league name in UI\r\n  /*\r\n    This function gets price data predicted by the selected neural network for the selected currency item in the 'Scourge' league.\r\n  */\r\n  async function fetchPredictedPrice() {\r\n    const result = await axios.get(\r\n      `/api/getPredictCurrency?Name=${location.state.CurName}` // Returns an array of price data for the whole league (90 days, so an array of length 90)\r\n    );\r\n    setPredictedItem([...result.data]);\r\n  }\r\n  /*\r\n    This function is used for fetching currency data from expired leagues\r\n  */\r\n  async function fetchOldData(oldLeague) {\r\n    setPastLeague(oldLeague);\r\n    setRealLeague(oldLeague);\r\n    setShowPrediction(false);\r\n    const result = await axios.get(\r\n      `/api/getPastCurrency?League=${oldLeague}&Id=${location.state.Id}` // League and item id is sent to backend\r\n    );\r\n    setItem([...result.data]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const result = await axios.get(\r\n        `/api/getCurrencyDetails?League=${league}&name=${match.params.id}&Id=${location.state.Id}`\r\n      );\r\n      setItem([...result.data]);\r\n    }\r\n    fetchData();\r\n    /*\r\n      If selected league is not 'Scourge' the prediction graph is not shown, since the neural network is only trained in data\r\n      from softcore temporary leagues it can only be used to predict the currently active softcore league.\r\n    */\r\n    if (league[0] === \"Scourge\") {\r\n      setShowPrediction(true);\r\n    } else setShowPrediction(false);\r\n    // Replace all spaces to underscores in item name to so it can be used in wiki link\r\n    let link = match.params.id.replace(/ /g, \"_\", function (x) {\r\n      return x;\r\n    });\r\n    setItemLink(`https://www.poewiki.net/wiki/${link}`); // Link to the currency items wiki page\r\n    setRealLeague(league);\r\n  }, [league, location, match.params.id]);\r\n\r\n  /*\r\n    Custom tooltip for the graph, this allows the User to hover over the graph and see the day and the price of the item on that day\r\n    on a tooltip.\r\n  */\r\n  const CustomTooltip = ({ active, payload, label }) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"custom-tooltip\">\r\n          <p className=\"label\">{`Day: ${label}`}</p>\r\n          <p className=\"price\">{`Price: ${payload[0].value} Chaos`}</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  /*\r\n    Price prediction graph that is only shown when 'Scourge' league is selected.\r\n    The graph has the item price on the Y-axis and the day of the league (1 - 90) on the X-axis.\r\n    User can hover over the graph to see a tooltip containing the day and price of the item on the day the cursor is hovered over.\r\n  */\r\n  const League = () => (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <h2>Predicted price</h2>\r\n      </div>\r\n      <Button variant=\"info\" onClick={() => fetchPredictedPrice()}>\r\n        Show predicted price\r\n      </Button>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <LineChart\r\n          width={1200}\r\n          height={600}\r\n          data={predicteditem}\r\n          margin={{ top: 5, right: 20, bottom: 30, left: 40 }}\r\n        >\r\n          <Line type=\"monotone\" dataKey=\"Price\" stroke=\"#8884d8\" />\r\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n          <XAxis\r\n            dataKey=\"Day\"\r\n            label={{\r\n              value: \"Days since League start\",\r\n              dy: 20,\r\n            }}\r\n          />\r\n          <YAxis\r\n            label={{\r\n              value: \"Price in Chaos\",\r\n              position: \"left\",\r\n              angle: -90,\r\n            }}\r\n          />\r\n          <Tooltip content={<CustomTooltip />} />\r\n        </LineChart>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h3>\r\n        Detailed overview for <a href={itemlink}>{match.params.id}</a>\r\n      </h3>\r\n      <div>Select ongoing League</div>\r\n      <DropdownButton id=\"dropdown-basic-button\" title={league}>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            setLeague([...[e.target.textContent]]);\r\n          }}\r\n        >\r\n          Scourge\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            setLeague([...[e.target.textContent]]);\r\n          }}\r\n        >\r\n          Hardcore Scourge\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            setLeague([...[e.target.textContent]]);\r\n          }}\r\n        >\r\n          Standard\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            setLeague([...[e.target.textContent]]);\r\n          }}\r\n        >\r\n          Hardcore\r\n        </Dropdown.Item>\r\n      </DropdownButton>\r\n      <div>Browse past League data</div>\r\n      <DropdownButton id=\"dropdown-basic-button\" title={pastleague}>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            fetchOldData(e.target.textContent);\r\n          }}\r\n        >\r\n          Expedition\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            fetchOldData(e.target.textContent);\r\n          }}\r\n        >\r\n          Hardcore Expedition\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            fetchOldData(e.target.textContent);\r\n          }}\r\n        >\r\n          Ultimatum\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            fetchOldData(e.target.textContent);\r\n          }}\r\n        >\r\n          Hardcore Ultimatum\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            fetchOldData(e.target.textContent);\r\n          }}\r\n        >\r\n          Ritual\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          onClick={(e) => {\r\n            fetchOldData(e.target.textContent);\r\n          }}\r\n        >\r\n          Hardcore Ritual\r\n        </Dropdown.Item>\r\n      </DropdownButton>\r\n\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <h2>Real price in {realleague}</h2>\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <LineChart\r\n          width={1200}\r\n          height={600}\r\n          data={item}\r\n          margin={{ top: 5, right: 20, bottom: 30, left: 40 }}\r\n        >\r\n          <Line type=\"monotone\" dataKey=\"History\" stroke=\"#8884d8\" />\r\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n          <XAxis\r\n            dataKey=\"Dates\"\r\n            label={{\r\n              value: \"Date\",\r\n              dy: 20,\r\n            }}\r\n          />\r\n          <YAxis\r\n            label={{\r\n              value: \"Price in Chaos\",\r\n              position: \"left\",\r\n              angle: -90,\r\n            }}\r\n          />\r\n          <Tooltip content={<CustomTooltip />} />\r\n        </LineChart>\r\n      </div>\r\n      {showPrediction ? <League /> : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CurrencyDetail;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport axios from \"axios\";\r\n\r\n/*\r\n  User can train and select neural networks on this page.\r\n*/\r\n\r\nfunction Predictionsettings() {\r\n  let [settings, setSettings] = useState([]);\r\n  let [units, setUnits] = useState();\r\n  let [activation, setActivation] = useState(\"ReLU\"); // Activation function is ReLU by default, this is whats shown on the dropdown menu by default\r\n  let [fitsettings, setFitSettings] = useState([]);\r\n  let [epochs, setEpochs] = useState(0); // default value of 0\r\n  let [batchsize, setBatchSize] = useState(0); // default value of 0\r\n  let [error, setError] = useState(\"\"); // Error message is empty by default\r\n  let [apiresponse, setApiResponse] = useState([]);\r\n  const [showError, setShowError] = useState(false); // Hides error message pop up by default\r\n  const [showModel, setShowModel] = useState(false); // Hides model message pop up by default\r\n  let [getresponse, setGetResponse] = useState([\r\n    ...[\"Waiting for response...\"], // Default message that is displayed when User starts training new neural network\r\n  ]);\r\n  let [postresponse, setPostResponse] = useState([\r\n    [...\"Waiting for response...\"], // Default message that is displayed when User starts training new neural network\r\n  ]);\r\n  const [showResponse, setShowResponse] = useState(false); // Hides the response UI until User has started training a new neural network\r\n  const [showButton, setShowButton] = useState(true); // Hides the start button when User has started training a new neural network\r\n\r\n  /*\r\n    Table rows and table data are created from settings\r\n  */\r\n  let listItems = settings.map((layer, id) => (\r\n    <tr key={id}>\r\n      <td>{id + 1}</td>\r\n      <td>{layer.amount}</td>\r\n      <td>{layer.function}</td>\r\n      <td>\r\n        <Button variant=\"danger\" onClick={() => deleteItem(id)}>\r\n          Delete\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  ));\r\n\r\n  useEffect(() => {\r\n    let x = { epochs: epochs, batchsize: batchsize }; // Save settings into one JSON object\r\n    setFitSettings(x);\r\n  }, [epochs, batchsize]); // This useEffect is called every time epochs or batchsize are changed\r\n\r\n  /*\r\n    Function that removes a row from the layer settings table when User clicks the 'Delete' button on the row.\r\n  */\r\n  const deleteItem = (index) => {\r\n    setShowError(false); // Hide any error messages that might be showing\r\n    let tmp = settings;\r\n    for (let i = 0; i < tmp.length; i++) {\r\n      if (i === index) {\r\n        tmp.splice(i, 1);\r\n        setSettings([...tmp]);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const clicked = () => {\r\n    /*\r\n      Frontend check for layer setting validity.\r\n      Checks for units and length of layer settings.\r\n    */\r\n    if (\r\n      units < 1 ||\r\n      units > 1000 ||\r\n      isNaN(units) ||\r\n      Number.isInteger(units) ||\r\n      !(units % 1 === 0)\r\n    ) {\r\n      setError(\r\n        \"Error, units must be an integer equal or greater than 1, and less than 1000\"\r\n      );\r\n      setShowError(true);\r\n      return;\r\n    } else if (settings.length + 1 > 10) {\r\n      setError(\"Error, maximum amount of layers is 10\");\r\n      setShowError(true);\r\n      return;\r\n    } else setShowError(false);\r\n    let tmp = settings;\r\n    tmp.push({ amount: units, function: activation });\r\n    for (let i = 0; i < tmp.length; i++) {\r\n      tmp[i].id = i;\r\n    }\r\n    console.log(tmp);\r\n    setSettings([...tmp]);\r\n  };\r\n\r\n  // Show a error if settings are incorrect when User starts new neural network or add a layer\r\n  const SettingsError = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Alert variant={\"danger\"}>{error}</Alert>\r\n      </div>\r\n    );\r\n  };\r\n  // Show a pop up when model is changed\r\n  const SettingsModel = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Alert variant={\"success\"}>{apiresponse}</Alert>\r\n      </div>\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    const timeId = setTimeout(() => {\r\n      setShowModel(false);\r\n    }, 3000); // Model message pop up time, 3 seconds\r\n\r\n    return () => {\r\n      setShowModel(true); // Hide model message\r\n      clearTimeout(timeId); // Clear the timeout loop\r\n    };\r\n  }, [apiresponse]); // This useEffect is made every time apiresponse is changed\r\n\r\n  /*\r\n    User can change selected neural network by clicking buttons on the UI, they call this function and change the path in backend.\r\n  */\r\n  const setBackendModel = (version) => {\r\n    async function Orig() {\r\n      const result = await axios.post(`/api/setModel`, {\r\n        model: version,\r\n      });\r\n      console.log(result);\r\n      setApiResponse([...result.data]);\r\n    }\r\n    Orig();\r\n  };\r\n\r\n  /*\r\n    This function is used to get data from poe.ninja and train a new neural network with user defined settings\r\n  */\r\n  const createNewModel = () => {\r\n    setGetResponse(...[\"Waiting for response...\"]);\r\n    setPostResponse(...[\"Waiting for response...\"]);\r\n    /*\r\n      Frontend checks for setting validity, these are also checked in backend to prevent any invalid settings from being used to train the neural network\r\n    */\r\n    if (settings.length < 1 || settings.length > 10) {\r\n      setError(\"Error, Layer amount must be between 1 and 10\");\r\n      setShowError(true);\r\n      return;\r\n    } else if (epochs < 1 || epochs > 1000) {\r\n      setError(\r\n        \"Error, Epochs must be an integer equal or greater than 1, and less than 1000\"\r\n      );\r\n      setShowError(true);\r\n      return;\r\n    } else if (batchsize < 1 || batchsize > 1000) {\r\n      setError(\r\n        \"Error, Batch Size must be an integer equal or greater than 1, and less than 1000\"\r\n      );\r\n      setShowError(true);\r\n      return;\r\n    } else setShowError(false);\r\n    setShowResponse(true);\r\n    async function newModel() {\r\n      setShowButton(false);\r\n      /*\r\n        This api call gets current currency data from poe.ninja for the 'Scourge' league and stores that data for the python script\r\n      */\r\n      const resultFromGet = await axios.get(`/api/getCurrentData`);\r\n      console.log(resultFromGet);\r\n      setGetResponse([...resultFromGet.data]); // Update UI so User can see progress updates\r\n      /*\r\n        This api call trains a new neural network with the given settings\r\n      */\r\n      const resultFromPost = await axios.post(`/api/createNewModel`, {\r\n        fitsettings: fitsettings,\r\n        layersettings: settings,\r\n      });\r\n      console.log(resultFromPost);\r\n      setPostResponse([...resultFromPost.data]); // Update UI so User can see progress updates\r\n      setShowButton(true);\r\n    }\r\n    newModel();\r\n  };\r\n\r\n  /*\r\n    Table that shows status of neural network training for User\r\n  */\r\n  const ResponseTable = () => {\r\n    return (\r\n      <Table>\r\n        <tbody>\r\n          <tr>\r\n            <td>Status of data gathering</td>\r\n            <td>{getresponse}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Status of Model Compiling</td>\r\n            <td>{postresponse}</td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  };\r\n\r\n  const MLButton = () => {\r\n    return (\r\n      <Button variant=\"primary\" onClick={() => createNewModel(\"Original\")}>\r\n        <h3>Create a new Neural Network model using the settings above</h3>\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Epochs</th>\r\n            <th>Batch size</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{epochs}</td>\r\n            <td>{batchsize}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <Form.Control\r\n                type=\"number\"\r\n                name=\"name\"\r\n                placeholder=\"integer\"\r\n                onChange={(event) =>\r\n                  setEpochs(event.target.value.replace(/\\D/, \"\"))\r\n                }\r\n              />\r\n            </td>\r\n            <td>\r\n              <Form.Control\r\n                type=\"number\"\r\n                name=\"name\"\r\n                placeholder=\"integer\"\r\n                onChange={(event) =>\r\n                  setBatchSize(event.target.value.replace(/\\D/, \"\"))\r\n                }\r\n              />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Id</th>\r\n            <th>Units</th>\r\n            <th>Activation function</th>\r\n            <th>Add or Remove layer</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {listItems}\r\n          <tr>\r\n            <td></td>\r\n            <td>\r\n              <Form.Control\r\n                type=\"number\"\r\n                name=\"name\"\r\n                placeholder=\"integer\"\r\n                onChange={(event) => setUnits(event.target.value)}\r\n              />\r\n            </td>\r\n            <td>\r\n              <DropdownButton id=\"dropdown-basic-button\" title={activation}>\r\n                <Dropdown.Item\r\n                  onClick={(event) => setActivation(event.target.textContent)}\r\n                >\r\n                  ReLU\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={(event) => setActivation(event.target.textContent)}\r\n                >\r\n                  Sigmoid\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={(event) => setActivation(event.target.textContent)}\r\n                >\r\n                  Tanh\r\n                </Dropdown.Item>\r\n              </DropdownButton>\r\n            </td>\r\n\r\n            <td>\r\n              <Button variant=\"primary\" onClick={() => clicked()}>\r\n                Add layer\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n\r\n      {showError ? <SettingsError /> : null}\r\n\r\n      <Table striped bordered hover>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <Button onClick={() => setBackendModel(\"Original\")}>\r\n                Load Original Model\r\n              </Button>\r\n            </td>\r\n            <td>\r\n              <Button onClick={() => setBackendModel(\"User\")}>\r\n                Load User Model\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n\r\n      {showModel ? <SettingsModel /> : null}\r\n\r\n      {showButton ? <MLButton /> : null}\r\n      {showResponse ? <ResponseTable /> : null}\r\n    </Container>\r\n  );\r\n}\r\nexport default Predictionsettings;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./Components/Nav\";\nimport Home from \"./Components/Home\";\nimport Currency from \"./Components/Currency\";\nimport CurrencyDetail from \"./Components/CurrencyDetail\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Predictionsettings from \"./Components/Predictionsettings\";\n\n/*\n  The app uses react router to route to different pages.\n  Route paths must be exact for Home and Currency, since they would be loaded when trying to go to other pages otherwise.\n*/\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/currency\" exact component={Currency} />\n          <Route path=\"/currency/:id\" component={CurrencyDetail} />\n          <Route path=\"/predictionsettings\" component={Predictionsettings} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}